export default class AssetsLoader{constructor(s){this._AssetsFiles=s,this._Assets={}}loadAll(){const s=[];for(const e in this._AssetsFiles)Object.prototype.hasOwnProperty.call(this._AssetsFiles,e)&&(!0===this._AssetsFiles[e].src.includes("mp3","mpeg","wav")?s.push(this.loadAudio(e,this._AssetsFiles[e].src)):(s.push(this.loadImage(e,this._AssetsFiles[e].src,this._AssetsFiles[e].width||void 0,this._AssetsFiles[e].height||void 0)),console.log(e,this._AssetsFiles[e])));return Promise.all(s)}loadImage(s,e,t,o){return new Promise((i,r)=>{const l=new Image;this._Assets[s]=l,l.onload=(()=>i(s)),l.onerror=(()=>r(new Error(`failed to load ${s}`))),l.src=e,void 0!==t&&(l.width=t),void 0!==o&&(l.height=o)})}loadAudio(s,e){return new Promise((t,o)=>{const i=new Audio;this._Assets[s]=i,i.muted=!1,i.oncanplaythrough=(()=>t(s)),i.onerror=(()=>o(new Error(`failed to load ${s}`))),i.src=e})}async Load(s,e,t=1500,o=1e3,i){try{await this.loadAll(),e=Object.assign(e,this._Assets)}catch(s){alert(`Error loading resources! ${s}. Reloading site...`),setTimeout(()=>window.reload,t)}void 0!==i&&await new Promise(s=>setTimeout(s,o)),s()}};